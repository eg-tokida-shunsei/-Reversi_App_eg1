<?php

$field = array_fill(1, 64, 0);

$field[28] = $field[37] = 1;
$field[29] = $field[36] = -1;

#実験用
$field[34] = $field[35] = $field[39] = -1;
$field[40] = -1;

$field[10] = $field[11] = $field[12] = $field[14] = $field[15] = -1;
$field[16] = 0;
$field[13] = 1;

#print_r($field);
$push = 9;
#$push
$player = 1;
$number = 0;
$X = 1;

#フィールド情報を保持しておく。
$field_log = $field;
#print($field[$number + 1 * $X]);

#

#$check = [];
#24行目が型の違いで怒られるけど、上記の方法で調べると、全部int型なんだけどな……
for ($X = 1; $X < 8; $X++) {
  #echo '$field:'. gettype($field) . "\n";

  #echo '$X:'.gettype($X) . "\n";

  #echo '$number:'.gettype($number) . "\n";

  #echo '$player:'.gettype($player) . "\n \n";

  #echo '$field_one:'.gettype($field[1]) . "\n";

  #echo '$hazione:'.gettype($field[$number + 1 * $X]) . "\n";



  echo 'FIELD33：'.$field[9]. "\n";
  echo 'FIELD34：'.$field[10]. "\n";
  echo 'FIELD35：'.$field[11]. "\n";
  echo 'FIELD36：'.$field[12]. "\n";
  echo 'FIELD37：'.$field[13]. "\n";
  echo 'FIELD38：'.$field[14]. "\n";
  echo 'FIELD39：'.$field[15]. "\n";
  echo 'FIELD40：'.$field[16]. "\n \n";

  if ($number === 1 || $number === 2 || $number === 3 || $number === 4 || $number === 5 || $number === 6 || $number === 7 || $number === 8 || $number === 57 || $number === 58 || $number === 59 || $number === 61 || $number === 62 || $number === 63 || $number === 64 || $number === 9 || $number === 17 || $number === 25 || $number === 33 || $number === 41 || $number === 49 || $number === 16 || $number === 24 || $number === 32 || $number === 40 || $number === 48 || $number === 56) {
    if ($X === 7) {
      if ($field[$number] + $player === 0) {
        $field[$number] = $player;
        $number_array[] = $number;
        $number = $number + 1;

        foreach($number_array as $value){
          $field[$value] = $field_log[$value];
        }
      }
      else {
        if($field[$number] === $player){
          $field[$push] = $player;
          $X = 8;
        }else{
        $number_array[] = $number;
        foreach($number_array as $value){
          $field[$value] = $field_log[$value];
        }
        $X = 8;
      }
      }
    } else {
      if($field[$number] === $player){
        $field[$push] = $player;
        $X = 8;
      }else{
      $number_array[] = $number;
      print_r ($number_array);
      foreach($number_array as $value){
        $field[$value] = $field_log[$value];
      }
      $X = 8;
    }
    }
    #print($number);
    #print($push);
  } else {
    if($X === 1){
      $number = $push + 1;
      if ($field[$number] + $player === 0) {
        $field[$number] = $player;
        $number_array = [$number];
        print_r ($number_array);
        $number = $number + 1;
      }
      else {
        if($field[$number] === $player){
          $field[$push] = $player;
          $X = 8;
        }else{
        $number_array[] = $number;
        foreach($number_array as $value){
          $field[$value] = $field_log[$value];
        }
        $X = 8;
      }
      }
    }

    else{

    #echo '$number:'.gettype($number) . "\n";
    #$check = $field[$number + 1 * $X];
    #print_r($field[$number + 1 * $X]);
    if ($field[$number] + $player === 0) {
      $field[$number] = $player;
      $number_array[] = $number;
      $number = $number + 1;
    }
    else {
      if($field[$number] === $player){
        $field[$push] = $player;
        $X = 8;
      }else{
      $number_array[] = $number;
      foreach($number_array as $value){
        $field[$value] = $field_log[$value];
      }
      $X = 8;
    }
    }
  }
  }


  #echo $field[$number + 1 * $X]+$player;

}

echo $field[9];
echo $field[10];
echo $field[11];
echo $field[12];
echo $field[13];
echo $field[14];
echo $field[15];
echo $field[16];

#関数化して8方向全部に試す方法+ゲームとしてすするめるのであれば、ひっくり返せなかったときにもう一度行動できる方法も追加する。

#端にいて探すときに、フィールド外を出る処理がでる。その処理をしないことも書いておく。パターンだいたい決まってるから、関数作ってからで良さそう。

#他は完璧！！
